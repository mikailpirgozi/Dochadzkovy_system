import * as nodemailer from 'nodemailer';
import type { AlertEmailData } from './alert.service';

// Types for report data
interface WeeklyReportData {
  topEmployees?: Array<{
    name: string;
    hours: number;
    days: number;
  }>;
  totalHours?: number;
  totalEmployees?: number;
  averageHours?: number;
  weekRange?: string;
  activeEmployees?: number;
  alerts?: number;
}

export interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth: {
    user: string;
    pass: string;
  };
}

export interface EmailTemplate {
  subject: string;
  html: string;
  text?: string;
}

export class EmailService {
  private static transporter: nodemailer.Transporter | null = null;

  /**
   * Initialize email service
   */
  static initialize(): void {
    if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
      console.warn('Email service not configured - missing SMTP environment variables');
      return;
    }

    const config: EmailConfig = {
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT ?? '587'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    };

    this.transporter = nodemailer.createTransport(config);

    // Verify connection
    this.transporter.verify((error) => {
      if (error) {
        console.error('Email service connection error:', error);
      } else {
        console.log('Email service initialized successfully');
      }
    });
  }

  /**
   * Send alert email to managers
   */
  static async sendAlertEmail(
    to: string,
    subject: string,
    alertData: AlertEmailData
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateAlertEmailTemplate(subject, alertData);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Alert email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending alert email:', error);
      return false;
    }
  }

  /**
   * Send weekly report email
   */
  static async sendWeeklyReport(
    to: string,
    companyName: string,
    reportData: WeeklyReportData
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateWeeklyReportTemplate(companyName, reportData);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Weekly report sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending weekly report:', error);
      return false;
    }
  }

  /**
   * Send password reset email
   */
  static async sendPasswordResetEmail(
    to: string,
    resetToken: string,
    companyName: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generatePasswordResetTemplate(resetToken, companyName);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Password reset email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending password reset email:', error);
      return false;
    }
  }

  /**
   * Send welcome email to new user
   */
  static async sendWelcomeEmail(
    to: string,
    userName: string,
    companyName: string,
    tempPassword: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateWelcomeEmailTemplate(userName, companyName, tempPassword);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Welcome email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending welcome email:', error);
      return false;
    }
  }

  /**
   * Generate alert email template
   */
  private static generateAlertEmailTemplate(subject: string, alertData: AlertEmailData): EmailTemplate {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #dc2626; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .alert-info { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #dc2626; }
          .actions { background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin-top: 20px; }
          .button { display: inline-block; background-color: #3b82f6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px 0; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>‚ö†Ô∏è ${subject}</h1>
        </div>
        
        <div class="content">
          <div class="alert-info">
            <p><strong>Zamestnanec:</strong> ${alertData.employeeName}</p>
            <p><strong>Firma:</strong> ${alertData.companyName}</p>
            <p><strong>ƒåas:</strong> ${alertData.timestamp}</p>
            <p><strong>Popis:</strong> ${alertData.description}</p>
            <p><strong>Poloha:</strong> ${alertData.location}</p>
          </div>
          
          <div class="actions">
            <p><strong>Odpor√∫ƒçan√© akcie:</strong></p>
            <ul>
              <li>Kontaktova≈• zamestnanca telefonicky</li>
              <li>Skontrolova≈• d√¥vod opustenia pracoviska</li>
              <li>Upravi≈• z√°znam v syst√©me ak je potrebn√©</li>
              <li>Dokumentova≈• incident pre HR</li>
            </ul>
            
            <p>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}" class="button">
                Otvori≈• Dashboard
              </a>
            </p>
          </div>
        </div>
        
        <div class="footer">
          <p>Tento email bol automaticky vygenerovan√Ω syst√©mom Doch√°dzka Pro.</p>
          <p>Pre technick√∫ podporu kontaktujte: ${process.env.SUPPORT_EMAIL ?? 'support@attendance-pro.com'}</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      ${subject}
      
      Zamestnanec: ${alertData.employeeName}
      Firma: ${alertData.companyName}
      ƒåas: ${alertData.timestamp}
      Popis: ${alertData.description}
      Poloha: ${alertData.location}
      
      Odpor√∫ƒçan√© akcie:
      - Kontaktova≈• zamestnanca telefonicky
      - Skontrolova≈• d√¥vod opustenia pracoviska
      - Upravi≈• z√°znam v syst√©me ak je potrebn√©
      - Dokumentova≈• incident pre HR
      
      Dashboard: ${process.env.ADMIN_DASHBOARD_URL ?? '#'}
      
      Tento email bol automaticky vygenerovan√Ω syst√©mom Doch√°dzka Pro.
    `;

    return { subject, html, text };
  }

  /**
   * Generate weekly report email template
   */
  private static generateWeeklyReportTemplate(companyName: string, reportData: WeeklyReportData): EmailTemplate {
    const subject = `T√Ω≈ædenn√Ω report - ${companyName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #3b82f6; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .stats { display: flex; justify-content: space-between; margin: 20px 0; }
          .stat-card { background-color: white; padding: 15px; border-radius: 5px; text-align: center; flex: 1; margin: 0 5px; }
          .stat-number { font-size: 24px; font-weight: bold; color: #3b82f6; }
          .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          .table th, .table td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; }
          .table th { background-color: #f3f4f6; font-weight: bold; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üìä T√Ω≈ædenn√Ω report</h1>
          <p>${companyName}</p>
        </div>
        
        <div class="content">
          <h2>Prehƒæad t√Ω≈æd≈àa</h2>
          
          <div class="stats">
            <div class="stat-card">
              <div class="stat-number">${String(reportData.totalHours ?? 0)}</div>
              <div>Celkov√© hodiny</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">${String(reportData.activeEmployees ?? 0)}</div>
              <div>Akt√≠vni zamestnanci</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">${String(reportData.alerts ?? 0)}</div>
              <div>Alerty</div>
            </div>
          </div>
          
          <h3>Top zamestnanci (hodiny)</h3>
          <table class="table">
            <thead>
              <tr>
                <th>Zamestnanec</th>
                <th>Hodiny</th>
                <th>Dni</th>
              </tr>
            </thead>
            <tbody>
              ${reportData.topEmployees?.map((emp) => `
                <tr>
                  <td>${emp.name}</td>
                  <td>${String(emp.hours)}h</td>
                  <td>${String(emp.days)}</td>
                </tr>
              `).join('') ?? '<tr><td colspan="3">≈Ωiadne d√°ta</td></tr>'}
            </tbody>
          </table>
        </div>
        
        <div class="footer">
          <p>T√Ω≈ædenn√Ω report vygenerovan√Ω ${new Date().toLocaleDateString('sk-SK')}</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      ${subject}
      
      Prehƒæad t√Ω≈æd≈àa:
      - Celkov√© hodiny: ${String(reportData.totalHours ?? 0)}
      - Akt√≠vni zamestnanci: ${String(reportData.activeEmployees ?? 0)}
      - Alerty: ${String(reportData.alerts ?? 0)}
      
      T√Ω≈ædenn√Ω report vygenerovan√Ω ${new Date().toLocaleDateString('sk-SK')}
    `;

    return { subject, html, text };
  }

  /**
   * Generate password reset email template
   */
  private static generatePasswordResetTemplate(resetToken: string, companyName: string): EmailTemplate {
    const subject = 'Reset hesla - Doch√°dzka Pro';
    const resetUrl = `${process.env.FRONTEND_URL ?? 'https://app.attendance-pro.com'}/reset-password?token=${resetToken}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #3b82f6; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .button { display: inline-block; background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 15px 0; }
          .warning { background-color: #fef3cd; border: 1px solid #fadb8a; color: #8a6914; padding: 10px; border-radius: 5px; margin: 15px 0; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üîê Reset hesla</h1>
        </div>
        
        <div class="content">
          <p>Dobr√Ω de≈à,</p>
          
          <p>Dostali sme po≈æiadavku na reset hesla pre v√°≈° √∫ƒçet v syst√©me Doch√°dzka Pro (${companyName}).</p>
          
          <p>Pre vytvorenie nov√©ho hesla kliknite na tlaƒçidlo ni≈æ≈°ie:</p>
          
          <p style="text-align: center;">
            <a href="${resetUrl}" class="button">Resetova≈• heslo</a>
          </p>
          
          <p>Alebo skop√≠rujte a vlo≈æte tento odkaz do prehliadaƒça:</p>
          <p style="word-break: break-all; background-color: #f3f4f6; padding: 10px; border-radius: 5px;">
            ${resetUrl}
          </p>
          
          <div class="warning">
            <strong>Upozornenie:</strong> Tento odkaz je platn√Ω len 1 hodinu. Ak ste nepo≈æiadali o reset hesla, ignorujte tento email.
          </div>
        </div>
        
        <div class="footer">
          <p>Ak m√°te probl√©my s resetom hesla, kontaktujte svojho administr√°tora.</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      Reset hesla - Doch√°dzka Pro
      
      Dobr√Ω de≈à,
      
      Dostali sme po≈æiadavku na reset hesla pre v√°≈° √∫ƒçet v syst√©me Doch√°dzka Pro (${companyName}).
      
      Pre vytvorenie nov√©ho hesla nav≈°t√≠vte: ${resetUrl}
      
      Upozornenie: Tento odkaz je platn√Ω len 1 hodinu. Ak ste nepo≈æiadali o reset hesla, ignorujte tento email.
      
      Ak m√°te probl√©my s resetom hesla, kontaktujte svojho administr√°tora.
    `;

    return { subject, html, text };
  }

  /**
   * Generate welcome email template
   */
  private static generateWelcomeEmailTemplate(
    userName: string, 
    companyName: string, 
    tempPassword: string
  ): EmailTemplate {
    const subject = `Vitajte v syst√©me Doch√°dzka Pro - ${companyName}`;
    const loginUrl = process.env.FRONTEND_URL ?? 'https://app.attendance-pro.com';
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #10b981; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .credentials { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #10b981; }
          .button { display: inline-block; background-color: #10b981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; margin: 15px 0; }
          .steps { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üëã Vitajte!</h1>
          <p>Doch√°dzka Pro - ${companyName}</p>
        </div>
        
        <div class="content">
          <p>Dobr√Ω de≈à ${userName},</p>
          
          <p>Vitajte v syst√©me Doch√°dzka Pro! V√°≈° √∫ƒçet bol √∫spe≈°ne vytvoren√Ω.</p>
          
          <div class="credentials">
            <h3>Prihlasovacie √∫daje:</h3>
            <p><strong>Email:</strong> [v√°≈° email]</p>
            <p><strong>Doƒçasn√© heslo:</strong> <code>${tempPassword}</code></p>
          </div>
          
          <p style="text-align: center;">
            <a href="${loginUrl}" class="button">Prihl√°si≈• sa</a>
          </p>
          
          <div class="steps">
            <h3>Prv√© kroky:</h3>
            <ol>
              <li>Prihl√°ste sa pomocou √∫dajov vy≈°≈°ie</li>
              <li>Zme≈àte si heslo na bezpeƒçnej≈°ie</li>
              <li>Stiahnite si mobiln√∫ aplik√°ciu</li>
              <li>Povoƒæte potrebn√© opr√°vnenia (poloha, kamera)</li>
              <li>Otestujte si pipnutie pomocou QR k√≥du</li>
            </ol>
          </div>
          
          <p><strong>D√¥le≈æit√©:</strong> Z bezpeƒçnostn√Ωch d√¥vodov si pros√≠m zme≈àte heslo pri prvom prihl√°sen√≠.</p>
        </div>
        
        <div class="footer">
          <p>Ak potrebujete pomoc, kontaktujte svojho administr√°tora alebo IT podporu.</p>
          <p>Podpora: ${process.env.SUPPORT_EMAIL ?? 'support@attendance-pro.com'}</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      ${subject}
      
      Dobr√Ω de≈à ${userName},
      
      Vitajte v syst√©me Doch√°dzka Pro! V√°≈° √∫ƒçet bol √∫spe≈°ne vytvoren√Ω.
      
      Prihlasovacie √∫daje:
      Email: [v√°≈° email]
      Doƒçasn√© heslo: ${tempPassword}
      
      Prihl√°senie: ${loginUrl}
      
      Prv√© kroky:
      1. Prihl√°ste sa pomocou √∫dajov vy≈°≈°ie
      2. Zme≈àte si heslo na bezpeƒçnej≈°ie
      3. Stiahnite si mobiln√∫ aplik√°ciu
      4. Povoƒæte potrebn√© opr√°vnenia (poloha, kamera)
      5. Otestujte si pipnutie pomocou QR k√≥du
      
      D√¥le≈æit√©: Z bezpeƒçnostn√Ωch d√¥vodov si pros√≠m zme≈àte heslo pri prvom prihl√°sen√≠.
      
      Ak potrebujete pomoc, kontaktujte svojho administr√°tora alebo IT podporu.
    `;

    return { subject, html, text };
  }

  /**
   * Test email configuration
   */
  static async testConnection(): Promise<boolean> {
    if (!this.transporter) {
      console.error('Email service not initialized');
      return false;
    }

    try {
      await this.transporter.verify();
      console.log('Email service connection test successful');
      return true;
    } catch (error) {
      console.error('Email service connection test failed:', error);
      return false;
    }
  }

  /**
   * Send geofence violation alert email
   */
  static async sendGeofenceViolationEmail(
    to: string,
    employeeName: string,
    companyName: string,
    violationTime: string,
    location: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateGeofenceViolationTemplate(
        employeeName, 
        companyName, 
        violationTime, 
        location
      );
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Geofence violation email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending geofence violation email:', error);
      return false;
    }
  }

  /**
   * Send correction request notification email
   */
  static async sendCorrectionRequestEmail(
    to: string,
    employeeName: string,
    companyName: string,
    correctionDetails: string,
    reason: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateCorrectionRequestTemplate(
        employeeName,
        companyName,
        correctionDetails,
        reason
      );
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Correction request email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending correction request email:', error);
      return false;
    }
  }

  /**
   * Send business trip request notification email
   */
  static async sendBusinessTripRequestEmail(
    to: string,
    employeeName: string,
    companyName: string,
    destination: string,
    purpose: string,
    dates: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateBusinessTripRequestTemplate(
        employeeName,
        companyName,
        destination,
        purpose,
        dates
      );
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Business trip request email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending business trip request email:', error);
      return false;
    }
  }

  /**
   * Send missing clock out notification email
   */
  static async sendMissingClockOutEmail(
    to: string,
    employeeName: string,
    companyName: string,
    clockInTime: string
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const template = this.generateMissingClockOutTemplate(
        employeeName,
        companyName,
        clockInTime
      );
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: template.subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Missing clock out email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending missing clock out email:', error);
      return false;
    }
  }

  /**
   * Generate geofence violation email template
   */
  private static generateGeofenceViolationTemplate(
    employeeName: string,
    companyName: string,
    violationTime: string,
    location: string
  ): EmailTemplate {
    const subject = `üö® Geofence Alert - ${employeeName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #dc2626; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .alert-info { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #dc2626; }
          .actions { background-color: #fef2f2; padding: 15px; border-radius: 5px; margin-top: 20px; border: 1px solid #fecaca; }
          .button { display: inline-block; background-color: #dc2626; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px 0; }
          .urgent { color: #dc2626; font-weight: bold; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üö® URGENT - Geofence Alert</h1>
        </div>
        
        <div class="content">
          <div class="alert-info">
            <p class="urgent">ZAMESTNANEC OPUSTIL PRACOVISKO BEZ ODPIPNUTIA!</p>
            <p><strong>Zamestnanec:</strong> ${employeeName}</p>
            <p><strong>Firma:</strong> ${companyName}</p>
            <p><strong>ƒåas poru≈°enia:</strong> ${violationTime}</p>
            <p><strong>Posledn√° zn√°ma poloha:</strong> ${location}</p>
            <p><strong>Status:</strong> <span style="color: #dc2626;">St√°le prihl√°sen√Ω v syst√©me</span></p>
          </div>
          
          <div class="actions">
            <p><strong>‚ö° OKAM≈ΩIT√â AKCIE POTREBN√â:</strong></p>
            <ul>
              <li><strong>Kontaktova≈• zamestnanca OKAM≈ΩITE</strong> - telef√≥n, SMS</li>
              <li>Overi≈• d√¥vod opustenia pracoviska</li>
              <li>Skontrolova≈• ƒçi sa jedn√° o n√∫dzov√∫ situ√°ciu</li>
              <li>Odpipn√∫≈• zamestnanca ak je to opr√°vnen√©</li>
              <li>Dokumentova≈• incident pre HR z√°znam</li>
            </ul>
            
            <p>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}" class="button">
                üìç Zobrazi≈• na mape
              </a>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/employees/${employeeName}" class="button">
                üë§ Detail zamestnanca
              </a>
            </p>
          </div>
          
          <p><strong>Pozn√°mka:</strong> Tento alert bol vygenerovan√Ω automaticky keƒè zamestnanec opustil definovan√∫ pracovn√∫ z√≥nu bez odpipnutia sa zo syst√©mu.</p>
        </div>
        
        <div class="footer">
          <p>Automatick√Ω alert z Doch√°dzka Pro - ${new Date().toLocaleString('sk-SK')}</p>
          <p>Pre technick√∫ podporu: ${process.env.SUPPORT_EMAIL ?? 'support@attendance-pro.com'}</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      üö® URGENT - Geofence Alert
      
      ZAMESTNANEC OPUSTIL PRACOVISKO BEZ ODPIPNUTIA!
      
      Zamestnanec: ${employeeName}
      Firma: ${companyName}
      ƒåas poru≈°enia: ${violationTime}
      Posledn√° zn√°ma poloha: ${location}
      Status: St√°le prihl√°sen√Ω v syst√©me
      
      ‚ö° OKAM≈ΩIT√â AKCIE POTREBN√â:
      - Kontaktova≈• zamestnanca OKAM≈ΩITE - telef√≥n, SMS
      - Overi≈• d√¥vod opustenia pracoviska
      - Skontrolova≈• ƒçi sa jedn√° o n√∫dzov√∫ situ√°ciu
      - Odpipn√∫≈• zamestnanca ak je to opr√°vnen√©
      - Dokumentova≈• incident pre HR z√°znam
      
      Dashboard: ${process.env.ADMIN_DASHBOARD_URL ?? '#'}
      
      Pozn√°mka: Tento alert bol vygenerovan√Ω automaticky keƒè zamestnanec opustil definovan√∫ pracovn√∫ z√≥nu bez odpipnutia sa zo syst√©mu.
      
      Automatick√Ω alert z Doch√°dzka Pro - ${new Date().toLocaleString('sk-SK')}
    `;

    return { subject, html, text };
  }

  /**
   * Generate correction request email template
   */
  private static generateCorrectionRequestTemplate(
    employeeName: string,
    companyName: string,
    correctionDetails: string,
    reason: string
  ): EmailTemplate {
    const subject = `üìù Nov√° po≈æiadavka na korekciu - ${employeeName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #f59e0b; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .request-info { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #f59e0b; }
          .reason-box { background-color: #fffbeb; padding: 15px; border-radius: 5px; margin: 15px 0; border: 1px solid #fed7aa; }
          .actions { background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin-top: 20px; }
          .button { display: inline-block; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px; }
          .approve-btn { background-color: #10b981; }
          .reject-btn { background-color: #ef4444; }
          .review-btn { background-color: #3b82f6; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üìù Nov√° po≈æiadavka na korekciu</h1>
        </div>
        
        <div class="content">
          <div class="request-info">
            <p><strong>Zamestnanec:</strong> ${employeeName}</p>
            <p><strong>Firma:</strong> ${companyName}</p>
            <p><strong>ƒåas po≈æiadavky:</strong> ${new Date().toLocaleString('sk-SK')}</p>
            <p><strong>Po≈æadovan√° zmena:</strong></p>
            <div style="background-color: #f3f4f6; padding: 10px; border-radius: 5px; margin: 10px 0;">
              ${correctionDetails}
            </div>
          </div>
          
          <div class="reason-box">
            <p><strong>D√¥vod korekcie:</strong></p>
            <p style="font-style: italic;">"${reason}"</p>
          </div>
          
          <div class="actions">
            <p><strong>Akcie:</strong></p>
            <p>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections" class="button approve-btn">
                ‚úÖ Schv√°li≈•
              </a>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections" class="button reject-btn">
                ‚ùå Zamietnu≈•
              </a>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections" class="button review-btn">
                üëÅÔ∏è Presk√∫ma≈•
              </a>
            </p>
          </div>
          
          <p><strong>Pozn√°mka:</strong> Korekcie by mali by≈• spracovan√© do 24 hod√≠n od podania.</p>
        </div>
        
        <div class="footer">
          <p>Automatick√° notifik√°cia z Doch√°dzka Pro</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      üìù Nov√° po≈æiadavka na korekciu
      
      Zamestnanec: ${employeeName}
      Firma: ${companyName}
      ƒåas po≈æiadavky: ${new Date().toLocaleString('sk-SK')}
      
      Po≈æadovan√° zmena:
      ${correctionDetails}
      
      D√¥vod korekcie:
      "${reason}"
      
      Dashboard: ${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections
      
      Pozn√°mka: Korekcie by mali by≈• spracovan√© do 24 hod√≠n od podania.
    `;

    return { subject, html, text };
  }

  /**
   * Generate business trip request email template
   */
  private static generateBusinessTripRequestTemplate(
    employeeName: string,
    companyName: string,
    destination: string,
    purpose: string,
    dates: string
  ): EmailTemplate {
    const subject = `‚úàÔ∏è Nov√° slu≈æobn√° cesta - ${employeeName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #3b82f6; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .trip-info { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #3b82f6; }
          .actions { background-color: #f3f4f6; padding: 15px; border-radius: 5px; margin-top: 20px; }
          .button { display: inline-block; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px; }
          .approve-btn { background-color: #10b981; }
          .reject-btn { background-color: #ef4444; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>‚úàÔ∏è Po≈æiadavka na slu≈æobn√∫ cestu</h1>
        </div>
        
        <div class="content">
          <div class="trip-info">
            <p><strong>Zamestnanec:</strong> ${employeeName}</p>
            <p><strong>Firma:</strong> ${companyName}</p>
            <p><strong>Destin√°cia:</strong> ${destination}</p>
            <p><strong>√öƒçel cesty:</strong> ${purpose}</p>
            <p><strong>Term√≠n:</strong> ${dates}</p>
            <p><strong>ƒåas po≈æiadavky:</strong> ${new Date().toLocaleString('sk-SK')}</p>
          </div>
          
          <div class="actions">
            <p><strong>Rozhodnutie:</strong></p>
            <p>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips" class="button approve-btn">
                ‚úÖ Schv√°li≈• cestu
              </a>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips" class="button reject-btn">
                ‚ùå Zamietnu≈• cestu
              </a>
            </p>
          </div>
          
          <p><strong>Pozn√°mka:</strong> Po schv√°len√≠ bude zamestnanec m√¥c≈• zaƒça≈• slu≈æobn√∫ cestu a syst√©m bude sledova≈• jeho polohu poƒças cesty.</p>
        </div>
        
        <div class="footer">
          <p>Automatick√° notifik√°cia z Doch√°dzka Pro</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      ‚úàÔ∏è Po≈æiadavka na slu≈æobn√∫ cestu
      
      Zamestnanec: ${employeeName}
      Firma: ${companyName}
      Destin√°cia: ${destination}
      √öƒçel cesty: ${purpose}
      Term√≠n: ${dates}
      ƒåas po≈æiadavky: ${new Date().toLocaleString('sk-SK')}
      
      Dashboard: ${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips
      
      Pozn√°mka: Po schv√°len√≠ bude zamestnanec m√¥c≈• zaƒça≈• slu≈æobn√∫ cestu a syst√©m bude sledova≈• jeho polohu poƒças cesty.
    `;

    return { subject, html, text };
  }

  /**
   * Generate missing clock out email template
   */
  private static generateMissingClockOutTemplate(
    employeeName: string,
    companyName: string,
    clockInTime: string
  ): EmailTemplate {
    const subject = `‚è∞ Ch√Ωba odpipnutie - ${employeeName}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background-color: #f59e0b; color: white; padding: 20px; border-radius: 5px 5px 0 0; text-align: center; }
          .content { background-color: #f9f9f9; padding: 20px; border-radius: 0 0 5px 5px; }
          .warning-info { background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #f59e0b; }
          .actions { background-color: #fefce8; padding: 15px; border-radius: 5px; margin-top: 20px; border: 1px solid #fde047; }
          .button { display: inline-block; background-color: #f59e0b; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 5px 0; }
          .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>‚è∞ Ch√Ωbaj√∫ce odpipnutie</h1>
        </div>
        
        <div class="content">
          <div class="warning-info">
            <p><strong>Zamestnanec:</strong> ${employeeName}</p>
            <p><strong>Firma:</strong> ${companyName}</p>
            <p><strong>ƒåas pripnutia:</strong> ${clockInTime}</p>
            <p><strong>Status:</strong> <span style="color: #f59e0b;">St√°le prihl√°sen√Ω</span></p>
            <p><strong>Detekovan√©:</strong> ${new Date().toLocaleString('sk-SK')}</p>
          </div>
          
          <div class="actions">
            <p><strong>Mo≈æn√© d√¥vody:</strong></p>
            <ul>
              <li>Zamestnanec zabudol sa odpipn√∫≈•</li>
              <li>Technick√Ω probl√©m s aplik√°ciou</li>
              <li>Pr√°ca mimo ≈°tandardn√Ωch hod√≠n</li>
              <li>N√∫dzov√° situ√°cia</li>
            </ul>
            
            <p><strong>Odpor√∫ƒçan√© akcie:</strong></p>
            <ul>
              <li>Kontaktova≈• zamestnanca</li>
              <li>Overi≈• skutoƒçn√Ω ƒças odchodu</li>
              <li>Manu√°lne odpipn√∫≈• ak je potrebn√©</li>
              <li>Vytvori≈• korekciu ƒçasu</li>
            </ul>
            
            <p>
              <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}" class="button">
                üìä Otvori≈• Dashboard
              </a>
            </p>
          </div>
        </div>
        
        <div class="footer">
          <p>Automatick√° kontrola z Doch√°dzka Pro</p>
        </div>
      </body>
      </html>
    `;

    const text = `
      ‚è∞ Ch√Ωbaj√∫ce odpipnutie
      
      Zamestnanec: ${employeeName}
      Firma: ${companyName}
      ƒåas pripnutia: ${clockInTime}
      Status: St√°le prihl√°sen√Ω
      Detekovan√©: ${new Date().toLocaleString('sk-SK')}
      
      Mo≈æn√© d√¥vody:
      - Zamestnanec zabudol sa odpipn√∫≈•
      - Technick√Ω probl√©m s aplik√°ciou
      - Pr√°ca mimo ≈°tandardn√Ωch hod√≠n
      - N√∫dzov√° situ√°cia
      
      Odpor√∫ƒçan√© akcie:
      - Kontaktova≈• zamestnanca
      - Overi≈• skutoƒçn√Ω ƒças odchodu
      - Manu√°lne odpipn√∫≈• ak je potrebn√©
      - Vytvori≈• korekciu ƒçasu
      
      Dashboard: ${process.env.ADMIN_DASHBOARD_URL ?? '#'}
    `;

    return { subject, html, text };
  }

  /**
   * Send test email
   */
  static async sendTestEmail(to: string): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: 'Test email - Doch√°dzka Pro',
        html: `
          <h2>Test email</h2>
          <p>Ak vid√≠te t√∫to spr√°vu, email slu≈æba funguje spr√°vne.</p>
          <p>ƒåas odoslania: ${new Date().toLocaleString('sk-SK')}</p>
        `,
        text: `
          Test email
          
          Ak vid√≠te t√∫to spr√°vu, email slu≈æba funguje spr√°vne.
          ƒåas odoslania: ${new Date().toLocaleString('sk-SK')}
        `,
      });

      console.log(`Test email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending test email:', error);
      return false;
    }
  }

  /**
   * Send correction status email
   */
  static async sendCorrectionStatusEmail(
    to: string,
    data: {
      employeeName: string;
      employeeEmail: string;
      originalEventType: string;
      originalTimestamp: Date;
      requestedChanges: string;
      reason: string;
      reviewNotes?: string;
      decision: 'APPROVED' | 'REJECTED';
      reviewedAt: Date;
      reviewerName: string;
    }
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const subject = data.decision === 'APPROVED' 
        ? `‚úÖ Korekcia schv√°len√° - ${data.employeeName}`
        : `‚ùå Korekcia zamietnut√° - ${data.employeeName}`;

      const template = this.generateCorrectionStatusEmailTemplate(data);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Correction status email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending correction status email:', error);
      return false;
    }
  }

  /**
   * Send business trip status email
   */
  static async sendBusinessTripStatusEmail(
    to: string,
    data: {
      employeeName: string;
      employeeEmail: string;
      destination: string;
      purpose: string;
      estimatedStart: Date;
      estimatedEnd: Date;
      notes?: string;
      tripId: string;
      createdAt: Date;
      decision: 'APPROVED' | 'REJECTED';
      reviewNotes?: string;
      reviewedAt: Date;
      reviewerName: string;
    }
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const subject = data.decision === 'APPROVED' 
        ? `‚úÖ Slu≈æobn√° cesta schv√°len√° - ${data.employeeName}`
        : `‚ùå Slu≈æobn√° cesta zamietnut√° - ${data.employeeName}`;

      const template = this.generateBusinessTripStatusEmailTemplate(data);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Business trip status email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending business trip status email:', error);
      return false;
    }
  }

  /**
   * Send long break email
   */
  static async sendLongBreakEmail(
    to: string,
    data: {
      employeeName: string;
      breakDuration: number;
      startTime: Date;
      location?: string;
      companyName: string;
    }
  ): Promise<boolean> {
    if (!this.transporter) {
      console.warn('Email service not initialized');
      return false;
    }

    try {
      const subject = `‚ö†Ô∏è Dlh√° prest√°vka - ${data.employeeName}`;
      const template = this.generateLongBreakEmailTemplate(data);
      
      await this.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject,
        html: template.html,
        text: template.text,
      });

      console.log(`Long break email sent to ${to}`);
      return true;
    } catch (error) {
      console.error('Error sending long break email:', error);
      return false;
    }
  }

  /**
   * Verify email connection
   */
  static async verifyConnection(): Promise<boolean> {
    if (!this.transporter) {
      return false;
    }

    try {
      await this.transporter.verify();
      return true;
    } catch (error) {
      console.error('Email connection verification failed:', error);
      return false;
    }
  }

  /**
   * Generate correction status email template
   */
  private static generateCorrectionStatusEmailTemplate(data: {
    employeeName: string;
    originalEventType: string;
    originalTimestamp: Date;
    requestedChanges: string;
    reason: string;
    reviewNotes?: string;
    decision: 'APPROVED' | 'REJECTED';
    reviewedAt: Date;
    reviewerName: string;
  }): EmailTemplate {
    const isApproved = data.decision === 'APPROVED';
    const subject = isApproved 
      ? `‚úÖ Korekcia schv√°len√° - ${data.employeeName}`
      : `‚ùå Korekcia zamietnut√° - ${data.employeeName}`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: ${isApproved ? '#10b981' : '#ef4444'};">
          ${isApproved ? '‚úÖ Korekcia schv√°len√°' : '‚ùå Korekcia zamietnut√°'}
        </h2>
        <p>Dobr√Ω de≈à ${data.employeeName},</p>
        <p>Va≈°a ≈æiados≈• o korekciu ƒçasu bola ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}.</p>
        
        <h3>Detaily korekcie:</h3>
        <ul>
          <li><strong>Typ udalosti:</strong> ${data.originalEventType}</li>
          <li><strong>P√¥vodn√Ω ƒças:</strong> ${data.originalTimestamp.toLocaleString('sk-SK')}</li>
          <li><strong>Po≈æadovan√© zmeny:</strong> ${data.requestedChanges}</li>
          <li><strong>D√¥vod:</strong> ${data.reason}</li>
        </ul>
        
        ${data.reviewNotes ? `
        <h3>Pozn√°mky mana≈æ√©ra:</h3>
        <p>${data.reviewNotes}</p>
        ` : ''}
        
        <p>Recenzov√°no: ${data.reviewedAt.toLocaleString('sk-SK')} od ${data.reviewerName}</p>
      </div>
    `;

    const text = `
      ${subject}
      
      Dobr√Ω de≈à ${data.employeeName},
      
      Va≈°a ≈æiados≈• o korekciu ƒçasu bola ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}.
      
      Detaily korekcie:
      - Typ udalosti: ${data.originalEventType}
      - P√¥vodn√Ω ƒças: ${data.originalTimestamp.toLocaleString('sk-SK')}
      - Po≈æadovan√© zmeny: ${data.requestedChanges}
      - D√¥vod: ${data.reason}
      
      ${data.reviewNotes ? `Pozn√°mky mana≈æ√©ra: ${data.reviewNotes}` : ''}
      
      Recenzov√°no: ${data.reviewedAt.toLocaleString('sk-SK')} od ${data.reviewerName}
    `;

    return { subject, html, text };
  }

  /**
   * Generate business trip status email template
   */
  private static generateBusinessTripStatusEmailTemplate(data: {
    destination: string;
    purpose: string;
    estimatedStart: Date;
    estimatedEnd: Date;
    notes?: string;
    decision: 'APPROVED' | 'REJECTED';
    reviewNotes?: string;
    reviewedAt: Date;
    reviewerName: string;
  }): EmailTemplate {
    const isApproved = data.decision === 'APPROVED';
    const subject = isApproved 
      ? `‚úÖ Slu≈æobn√° cesta schv√°len√°`
      : `‚ùå Slu≈æobn√° cesta zamietnut√°`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: ${isApproved ? '#10b981' : '#ef4444'};">
          ${isApproved ? '‚úÖ Slu≈æobn√° cesta schv√°len√°' : '‚ùå Slu≈æobn√° cesta zamietnut√°'}
        </h2>
        
        <h3>Detaily slu≈æobnej cesty:</h3>
        <ul>
          <li><strong>Destin√°cia:</strong> ${data.destination}</li>
          <li><strong>√öƒçel:</strong> ${data.purpose}</li>
          <li><strong>Zaƒçiatok:</strong> ${data.estimatedStart.toLocaleString('sk-SK')}</li>
          <li><strong>Koniec:</strong> ${data.estimatedEnd.toLocaleString('sk-SK')}</li>
        </ul>
        
        ${data.reviewNotes ? `
        <h3>Pozn√°mky mana≈æ√©ra:</h3>
        <p>${data.reviewNotes}</p>
        ` : ''}
        
        <p>Recenzov√°no: ${data.reviewedAt.toLocaleString('sk-SK')} od ${data.reviewerName}</p>
      </div>
    `;

    const text = `
      ${subject}
      
      Detaily slu≈æobnej cesty:
      - Destin√°cia: ${data.destination}
      - √öƒçel: ${data.purpose}
      - Zaƒçiatok: ${data.estimatedStart.toLocaleString('sk-SK')}
      - Koniec: ${data.estimatedEnd.toLocaleString('sk-SK')}
      
      ${data.reviewNotes ? `Pozn√°mky mana≈æ√©ra: ${data.reviewNotes}` : ''}
      
      Recenzov√°no: ${data.reviewedAt.toLocaleString('sk-SK')} od ${data.reviewerName}
    `;

    return { subject, html, text };
  }

  /**
   * Generate long break email template
   */
  private static generateLongBreakEmailTemplate(data: {
    employeeName: string;
    breakDuration: number;
    startTime: Date;
    location?: string;
    companyName: string;
  }): EmailTemplate {
    const subject = `‚ö†Ô∏è Dlh√° prest√°vka - ${data.employeeName}`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #f59e0b;">‚ö†Ô∏è Dlh√° prest√°vka</h2>
        
        <p>Zamestnanec ${data.employeeName} m√° dlh√∫ prest√°vku.</p>
        
        <h3>Detaily:</h3>
        <ul>
          <li><strong>Dƒ∫≈æka prest√°vky:</strong> ${data.breakDuration} min√∫t</li>
          <li><strong>Zaƒçiatok:</strong> ${data.startTime.toLocaleString('sk-SK')}</li>
          ${data.location ? `<li><strong>Poloha:</strong> ${data.location}</li>` : ''}
        </ul>
      </div>
    `;

    const text = `
      ${subject}
      
      Zamestnanec ${data.employeeName} m√° dlh√∫ prest√°vku.
      
      Detaily:
      - Dƒ∫≈æka prest√°vky: ${data.breakDuration} min√∫t
      - Zaƒçiatok: ${data.startTime.toLocaleString('sk-SK')}
      ${data.location ? `- Poloha: ${data.location}` : ''}
    `;

    return { subject, html, text };
  }

  /**
   * Send correction request email to managers
   */
  async sendCorrectionRequestEmail(to: string, data: {
    employeeName: string;
    employeeEmail: string;
    originalEventType: string;
    originalTimestamp: Date;
    requestedChanges: string;
    reason: string;
    correctionId: string;
    createdAt: Date;
  }): Promise<void> {
    if (!EmailService.transporter) {
      console.warn('Email service not configured');
      return;
    }

    try {
      await EmailService.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: `üìù Nov√° korekcia od ${data.employeeName}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9fafb;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #1f2937; margin: 0; font-size: 24px;">üìù Nov√° korekcia ƒçasu</h1>
                <p style="color: #6b7280; margin: 10px 0 0 0;">Po≈æiadavka na schv√°lenie</p>
              </div>

              <div style="background-color: #fef3c7; padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b; margin-bottom: 25px;">
                <h3 style="color: #92400e; margin: 0 0 10px 0; font-size: 16px;">‚ö†Ô∏è Vy≈æaduje va≈°u pozornos≈•</h3>
                <p style="color: #92400e; margin: 0; font-size: 14px;">Zamestnanec po≈æiadal o korekciu svojho z√°znamu doch√°dzky.</p>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Inform√°cie o zamestnancovi</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Meno:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.employeeName}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Email:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.employeeEmail}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">D√°tum ≈æiadosti:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.createdAt.toLocaleString('sk-SK')}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">P√¥vodn√Ω z√°znam</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Typ udalosti:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.originalEventType}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">ƒåas:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.originalTimestamp.toLocaleString('sk-SK')}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Po≈æadovan√© zmeny</h3>
                <div style="background-color: #f3f4f6; padding: 15px; border-radius: 6px;">
                  <p style="color: #1f2937; margin: 0; font-family: monospace; font-size: 14px;">${data.requestedChanges}</p>
                </div>
              </div>

              <div style="margin-bottom: 30px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">D√¥vod korekcie</h3>
                <div style="background-color: #f9fafb; padding: 15px; border-radius: 6px; border: 1px solid #e5e7eb;">
                  <p style="color: #374151; margin: 0; line-height: 1.5;">${data.reason}</p>
                </div>
              </div>

              <div style="text-align: center; margin-bottom: 25px;">
                <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections/${data.correctionId}" 
                   style="display: inline-block; background-color: #3b82f6; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 500; margin: 0 10px;">
                  üìä Zobrazi≈• v dashboarde
                </a>
              </div>

              <div style="border-top: 1px solid #e5e7eb; padding-top: 20px; text-align: center;">
                <p style="color: #6b7280; margin: 0; font-size: 14px;">
                  Tento email bol odoslan√Ω automaticky syst√©mom Doch√°dzka Pro.
                </p>
              </div>
            </div>
          </div>
        `,
        text: `
          NOV√Å KOREKCIA ƒåASU
          
          Zamestnanec: ${data.employeeName} (${data.employeeEmail})
          D√°tum ≈æiadosti: ${data.createdAt.toLocaleString('sk-SK')}
          
          P√îVODN√ù Z√ÅZNAM:
          Typ: ${data.originalEventType}
          ƒåas: ${data.originalTimestamp.toLocaleString('sk-SK')}
          
          PO≈ΩADOVAN√â ZMENY:
          ${data.requestedChanges}
          
          D√îVOD KOREKCIE:
          ${data.reason}
          
          Pre schv√°lenie alebo zamietnutie nav≈°t√≠vte admin dashboard:
          ${process.env.ADMIN_DASHBOARD_URL ?? '#'}/corrections/${data.correctionId}
        `,
      });

      console.log(`Correction request email sent to ${to}`);
    } catch (error) {
      console.error('Error sending correction request email:', error);
      throw error;
    }
  }

  /**
   * Send correction decision email to employee
   */
  async sendCorrectionDecisionEmail(to: string, data: {
    employeeName: string;
    decision: 'APPROVED' | 'REJECTED';
    originalEventType: string;
    originalTimestamp: Date;
    requestedChanges: string;
    reason: string;
    reviewNotes?: string;
    reviewedAt: Date;
    reviewerName: string;
  }): Promise<void> {
    if (!EmailService.transporter) {
      console.warn('Email service not configured');
      return;
    }

    const isApproved = data.decision === 'APPROVED';
    const statusColor = isApproved ? '#10b981' : '#ef4444';
    const statusIcon = isApproved ? '‚úÖ' : '‚ùå';
    const statusText = isApproved ? 'SCHV√ÅLEN√Å' : 'ZAMIETNUT√Å';

    try {
      await EmailService.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: `${statusIcon} Korekcia ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9fafb;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: ${statusColor}; margin: 0; font-size: 24px;">${statusIcon} Korekcia ${statusText}</h1>
                <p style="color: #6b7280; margin: 10px 0 0 0;">Rozhodnutie o va≈°ej po≈æiadavke</p>
              </div>

              <div style="background-color: ${isApproved ? '#d1fae5' : '#fee2e2'}; padding: 20px; border-radius: 8px; border-left: 4px solid ${statusColor}; margin-bottom: 25px;">
                <h3 style="color: ${isApproved ? '#065f46' : '#991b1b'}; margin: 0 0 10px 0; font-size: 16px;">
                  ${isApproved ? '‚úÖ Va≈°a korekcia bola schv√°len√°' : '‚ùå Va≈°a korekcia bola zamietnut√°'}
                </h3>
                <p style="color: ${isApproved ? '#065f46' : '#991b1b'}; margin: 0; font-size: 14px;">
                  ${isApproved 
                    ? 'Zmeny boli aplikovan√© na v√°≈° z√°znam doch√°dzky.'
                    : 'Va≈°a po≈æiadavka nebola schv√°len√°. Pozrite si d√¥vod ni≈æ≈°ie.'}
                </p>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Inform√°cie o rozhodnut√≠</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Rozhodol:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.reviewerName}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">D√°tum rozhodnutia:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.reviewedAt.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Stav:</td>
                    <td style="padding: 8px 0; color: ${statusColor}; font-weight: 600;">${statusText}</td>
                  </tr>
                </table>
              </div>

              ${data.reviewNotes ? `
                <div style="margin-bottom: 30px;">
                  <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">
                    ${isApproved ? 'Pozn√°mky mana≈æ√©ra' : 'D√¥vod zamietnutia'}
                  </h3>
                  <div style="background-color: ${isApproved ? '#eff6ff' : '#fef2f2'}; padding: 15px; border-radius: 6px; border: 1px solid ${isApproved ? '#dbeafe' : '#fecaca'};">
                    <p style="color: ${isApproved ? '#1e40af' : '#dc2626'}; margin: 0; line-height: 1.5;">${data.reviewNotes}</p>
                  </div>
                </div>
              ` : ''}

              <div style="border-top: 1px solid #e5e7eb; padding-top: 20px; text-align: center;">
                <p style="color: #6b7280; margin: 0; font-size: 14px;">
                  Tento email bol odoslan√Ω automaticky syst√©mom Doch√°dzka Pro.
                </p>
              </div>
            </div>
          </div>
        `,
        text: `
          KOREKCIA ${statusText}
          
          Va≈°a korekcia ƒçasu bola ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}.
          
          ROZHODOL: ${data.reviewerName}
          D√ÅTUM ROZHODNUTIA: ${data.reviewedAt.toLocaleString('sk-SK')}
          
          ${data.reviewNotes ? `
          ${isApproved ? 'POZN√ÅMKY MANA≈Ω√âRA' : 'D√îVOD ZAMIETNUTIA'}:
          ${data.reviewNotes}
          ` : ''}
          
          ${isApproved ? `
          Zmeny boli aplikovan√© na v√°≈° z√°znam. M√¥≈æete si ich pozrie≈• v aplik√°cii.
          ` : `
          Ak m√°te ot√°zky k zamietnutiu, kontaktujte svojho mana≈æ√©ra.
          `}
        `,
      });

      console.log(`Correction decision email sent to ${to}`);
    } catch (error) {
      console.error('Error sending correction decision email:', error);
      throw error;
    }
  }

  /**
   * Send business trip request email to managers
   */
  async sendBusinessTripRequestEmail(to: string, data: {
    employeeName: string;
    employeeEmail: string;
    destination: string;
    purpose: string;
    estimatedStart: Date;
    estimatedEnd: Date;
    notes?: string;
    tripId: string;
    createdAt: Date;
  }): Promise<void> {
    if (!EmailService.transporter) {
      console.warn('Email service not configured');
      return;
    }

    const duration = Math.ceil((data.estimatedEnd.getTime() - data.estimatedStart.getTime()) / (1000 * 60 * 60 * 24));

    try {
      await EmailService.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: `‚úàÔ∏è Nov√° slu≈æobn√° cesta od ${data.employeeName}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9fafb;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #1f2937; margin: 0; font-size: 24px;">‚úàÔ∏è Nov√° slu≈æobn√° cesta</h1>
                <p style="color: #6b7280; margin: 10px 0 0 0;">Po≈æiadavka na schv√°lenie</p>
              </div>

              <div style="background-color: #dbeafe; padding: 20px; border-radius: 8px; border-left: 4px solid #3b82f6; margin-bottom: 25px;">
                <h3 style="color: #1e40af; margin: 0 0 10px 0; font-size: 16px;">üìã Vy≈æaduje va≈°u pozornos≈•</h3>
                <p style="color: #1e40af; margin: 0; font-size: 14px;">Zamestnanec po≈æiadal o schv√°lenie slu≈æobnej cesty.</p>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Inform√°cie o zamestnancovi</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Meno:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.employeeName}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Email:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.employeeEmail}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">D√°tum ≈æiadosti:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.createdAt.toLocaleString('sk-SK')}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Detaily slu≈æobnej cesty</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Destin√°cia:</td>
                    <td style="padding: 8px 0; color: #1f2937; font-weight: 600;">${data.destination}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Zaƒçiatok:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.estimatedStart.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Koniec:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.estimatedEnd.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Trvanie:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${String(duration)} ${duration === 1 ? 'de≈à' : duration < 5 ? 'dni' : 'dn√≠'}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">√öƒçel cesty</h3>
                <div style="background-color: #f9fafb; padding: 15px; border-radius: 6px; border: 1px solid #e5e7eb;">
                  <p style="color: #374151; margin: 0; line-height: 1.5;">${data.purpose}</p>
                </div>
              </div>

              ${data.notes ? `
                <div style="margin-bottom: 30px;">
                  <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Dodatoƒçn√© pozn√°mky</h3>
                  <div style="background-color: #f3f4f6; padding: 15px; border-radius: 6px;">
                    <p style="color: #1f2937; margin: 0; line-height: 1.5;">${data.notes}</p>
                  </div>
                </div>
              ` : ''}

              <div style="text-align: center; margin-bottom: 25px;">
                <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips/${data.tripId}" 
                   style="display: inline-block; background-color: #10b981; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 500; margin: 0 10px;">
                  ‚úÖ Schv√°li≈•
                </a>
                <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips/${data.tripId}" 
                   style="display: inline-block; background-color: #ef4444; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 500; margin: 0 10px;">
                  ‚ùå Zamietnu≈•
                </a>
              </div>

              <div style="border-top: 1px solid #e5e7eb; padding-top: 20px; text-align: center;">
                <p style="color: #6b7280; margin: 0; font-size: 14px;">
                  Tento email bol odoslan√Ω automaticky syst√©mom Doch√°dzka Pro.<br>
                  Pre spr√°vu slu≈æobn√Ωch ciest nav≈°t√≠vte <a href="${process.env.ADMIN_DASHBOARD_URL ?? '#'}" style="color: #3b82f6;">admin dashboard</a>.
                </p>
              </div>
            </div>
          </div>
        `,
        text: `
          NOV√Å SLU≈ΩOBN√Å CESTA
          
          Zamestnanec: ${data.employeeName} (${data.employeeEmail})
          D√°tum ≈æiadosti: ${data.createdAt.toLocaleString('sk-SK')}
          
          DETAILY CESTY:
          Destin√°cia: ${data.destination}
          Zaƒçiatok: ${data.estimatedStart.toLocaleString('sk-SK')}
          Koniec: ${data.estimatedEnd.toLocaleString('sk-SK')}
          Trvanie: ${String(duration)} ${duration === 1 ? 'de≈à' : duration < 5 ? 'dni' : 'dn√≠'}
          
          √öƒåEL CESTY:
          ${data.purpose}
          
          ${data.notes ? `
          POZN√ÅMKY:
          ${data.notes}
          ` : ''}
          
          Pre schv√°lenie alebo zamietnutie nav≈°t√≠vte admin dashboard:
          ${process.env.ADMIN_DASHBOARD_URL ?? '#'}/business-trips/${data.tripId}
        `,
      });

      console.log(`Business trip request email sent to ${to}`);
    } catch (error) {
      console.error('Error sending business trip request email:', error);
      throw error;
    }
  }

  /**
   * Send business trip decision email to employee
   */
  async sendBusinessTripDecisionEmail(to: string, data: {
    employeeName: string;
    decision: 'APPROVED' | 'REJECTED';
    destination: string;
    purpose: string;
    estimatedStart: Date;
    estimatedEnd: Date;
    notes?: string;
    reviewNotes?: string;
    reviewedAt: Date;
    reviewerName: string;
  }): Promise<void> {
    if (!EmailService.transporter) {
      console.warn('Email service not configured');
      return;
    }

    const isApproved = data.decision === 'APPROVED';
    const statusColor = isApproved ? '#10b981' : '#ef4444';
    const statusIcon = isApproved ? '‚úÖ' : '‚ùå';
    const statusText = isApproved ? 'SCHV√ÅLEN√Å' : 'ZAMIETNUT√Å';
    const duration = Math.ceil((data.estimatedEnd.getTime() - data.estimatedStart.getTime()) / (1000 * 60 * 60 * 24));

    try {
      await EmailService.transporter.sendMail({
        from: process.env.SMTP_FROM ?? process.env.SMTP_USER,
        to,
        subject: `${statusIcon} Slu≈æobn√° cesta ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9fafb;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: ${statusColor}; margin: 0; font-size: 24px;">${statusIcon} Slu≈æobn√° cesta ${statusText}</h1>
                <p style="color: #6b7280; margin: 10px 0 0 0;">Rozhodnutie o va≈°ej po≈æiadavke</p>
              </div>

              <div style="background-color: ${isApproved ? '#d1fae5' : '#fee2e2'}; padding: 20px; border-radius: 8px; border-left: 4px solid ${statusColor}; margin-bottom: 25px;">
                <h3 style="color: ${isApproved ? '#065f46' : '#991b1b'}; margin: 0 0 10px 0; font-size: 16px;">
                  ${isApproved ? '‚úÖ Va≈°a slu≈æobn√° cesta bola schv√°len√°' : '‚ùå Va≈°a slu≈æobn√° cesta bola zamietnut√°'}
                </h3>
                <p style="color: ${isApproved ? '#065f46' : '#991b1b'}; margin: 0; font-size: 14px;">
                  ${isApproved 
                    ? 'M√¥≈æete zaƒça≈• pr√≠pravu na cestu podƒæa schv√°len√©ho pl√°nu.'
                    : 'Va≈°a po≈æiadavka nebola schv√°len√°. Pozrite si d√¥vod ni≈æ≈°ie.'}
                </p>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Inform√°cie o rozhodnut√≠</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Rozhodol:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.reviewerName}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">D√°tum rozhodnutia:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.reviewedAt.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Stav:</td>
                    <td style="padding: 8px 0; color: ${statusColor}; font-weight: 600;">${statusText}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">Detaily slu≈æobnej cesty</h3>
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Destin√°cia:</td>
                    <td style="padding: 8px 0; color: #1f2937; font-weight: 600;">${data.destination}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Zaƒçiatok:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.estimatedStart.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Koniec:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${data.estimatedEnd.toLocaleString('sk-SK')}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Trvanie:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${String(duration)} ${duration === 1 ? 'de≈à' : duration < 5 ? 'dni' : 'dn√≠'}</td>
                  </tr>
                </table>
              </div>

              <div style="margin-bottom: 25px;">
                <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">√öƒçel cesty</h3>
                <div style="background-color: #f9fafb; padding: 15px; border-radius: 6px; border: 1px solid #e5e7eb;">
                  <p style="color: #374151; margin: 0; line-height: 1.5;">${data.purpose}</p>
                </div>
              </div>

              ${data.reviewNotes ? `
                <div style="margin-bottom: 30px;">
                  <h3 style="color: #1f2937; margin: 0 0 15px 0; font-size: 18px;">
                    ${isApproved ? 'Pozn√°mky mana≈æ√©ra' : 'D√¥vod zamietnutia'}
                  </h3>
                  <div style="background-color: ${isApproved ? '#eff6ff' : '#fef2f2'}; padding: 15px; border-radius: 6px; border: 1px solid ${isApproved ? '#dbeafe' : '#fecaca'};">
                    <p style="color: ${isApproved ? '#1e40af' : '#dc2626'}; margin: 0; line-height: 1.5;">${data.reviewNotes}</p>
                  </div>
                </div>
              ` : ''}

              ${isApproved ? `
                <div style="background-color: #f0f9ff; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
                  <h3 style="color: #0369a1; margin: 0 0 10px 0; font-size: 16px;">üìù ƒéal≈°ie kroky</h3>
                  <ul style="color: #0369a1; margin: 10px 0 0 20px; padding: 0;">
                    <li>Pripravte si potrebn√© dokumenty a materi√°ly</li>
                    <li>Skontrolujte cestovn√© pokyny a rozpoƒçet</li>
                    <li>Zaƒçnite cestu cez aplik√°ciu v de≈à odchodu</li>
                    <li>Ukonƒçite cestu po n√°vrate</li>
                  </ul>
                </div>
              ` : ''}

              <div style="border-top: 1px solid #e5e7eb; padding-top: 20px; text-align: center;">
                <p style="color: #6b7280; margin: 0; font-size: 14px;">
                  Tento email bol odoslan√Ω automaticky syst√©mom Doch√°dzka Pro.<br>
                  ${!isApproved ? 'Ak m√°te ot√°zky k zamietnutiu, kontaktujte svojho mana≈æ√©ra.' : ''}
                </p>
              </div>
            </div>
          </div>
        `,
        text: `
          SLU≈ΩOBN√Å CESTA ${statusText}
          
          Va≈°a slu≈æobn√° cesta do ${data.destination} bola ${isApproved ? 'schv√°len√°' : 'zamietnut√°'}.
          
          ROZHODOL: ${data.reviewerName}
          D√ÅTUM ROZHODNUTIA: ${data.reviewedAt.toLocaleString('sk-SK')}
          
          DETAILY CESTY:
          Destin√°cia: ${data.destination}
          Zaƒçiatok: ${data.estimatedStart.toLocaleString('sk-SK')}
          Koniec: ${data.estimatedEnd.toLocaleString('sk-SK')}
          Trvanie: ${String(duration)} ${duration === 1 ? 'de≈à' : duration < 5 ? 'dni' : 'dn√≠'}
          
          √öƒåEL CESTY:
          ${data.purpose}
          
          ${data.reviewNotes ? `
          ${isApproved ? 'POZN√ÅMKY MANA≈Ω√âRA' : 'D√îVOD ZAMIETNUTIA'}:
          ${data.reviewNotes}
          ` : ''}
          
          ${isApproved ? `
          ƒéAL≈†IE KROKY:
          - Pripravte si potrebn√© dokumenty a materi√°ly
          - Skontrolujte cestovn√© pokyny a rozpoƒçet  
          - Zaƒçnite cestu cez aplik√°ciu v de≈à odchodu
          - Ukonƒçite cestu po n√°vrate
          ` : `
          Ak m√°te ot√°zky k zamietnutiu, kontaktujte svojho mana≈æ√©ra.
          `}
        `,
      });

      console.log(`Business trip decision email sent to ${to}`);
    } catch (error) {
      console.error('Error sending business trip decision email:', error);
      throw error;
    }
  }
}

// Initialize email service when module is loaded
EmailService.initialize();
