# üö® DOCH√ÅDZKA PRO - CURSOR AI RULES

## üéØ PROJECT OVERVIEW
- **Multi-tenant attendance tracking app** with React Native + Expo (mobile) and Railway backend
- **GPS tracking, QR scanning, geofencing, push notifications**
- **Target: iOS/Android App Store approval**
- **Zero tolerance for errors/warnings policy**

## üî• CRITICAL RULES - ZERO ERRORS POLICY

### ‚ö° MANDATORY ERROR FIXING
- **NEVER leave ANY errors or warnings in code**
- **ALWAYS fix ALL TypeScript, ESLint, and build errors immediately**
- **NEVER use shortcuts or simplifications to avoid fixing errors**
- **ALWAYS preserve original file structure and fix systematically**
- **Run linting and type checking after EVERY code change**

### üö´ ABSOLUTE PROHIBITIONS
- ‚ùå `any` types - use proper TypeScript types
- ‚ùå `@ts-ignore` - use `@ts-expect-error` with explanation if absolutely necessary
- ‚ùå Unused imports/variables - remove immediately
- ‚ùå Missing React hook dependencies - fix exhaustive-deps warnings
- ‚ùå Committing code with warnings/errors
- ‚ùå Incomplete implementations - finish what you start

## üì± MOBILE APP RULES (React Native + Expo)

### üéØ Architecture Patterns
```typescript
// ‚úÖ CORRECT - Proper component structure
interface ComponentProps {
  userId: string;
  onSuccess: (data: AttendanceEvent) => void;
  onError: (error: string) => void;
}

const AttendanceComponent: React.FC<ComponentProps> = ({ userId, onSuccess, onError }) => {
  // Implementation
};

// ‚úÖ CORRECT - Custom hooks for business logic
const useAttendance = (userId: string) => {
  const [events, setEvents] = useState<AttendanceEvent[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Implementation with proper error handling
  return { events, loading, error, clockIn, clockOut };
};
```

### üìç Location & GPS Rules
```typescript
// ‚úÖ CORRECT - Always handle location permissions
const requestLocationPermission = async (): Promise<boolean> => {
  try {
    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      throw new Error('Location permission denied');
    }
    return true;
  } catch (error) {
    console.error('Location permission error:', error);
    return false;
  }
};

// ‚úÖ CORRECT - Always validate GPS accuracy
const validateLocationAccuracy = (location: LocationObject): boolean => {
  const MIN_ACCURACY = 50; // meters
  return location.coords.accuracy !== null && location.coords.accuracy <= MIN_ACCURACY;
};
```

### üîî Push Notifications Rules
```typescript
// ‚úÖ CORRECT - Always handle notification permissions
const registerForPushNotifications = async (): Promise<string | null> => {
  try {
    const { status } = await Notifications.requestPermissionsAsync();
    if (status !== 'granted') {
      return null;
    }
    
    const token = await Notifications.getExpoPushTokenAsync();
    return token.data;
  } catch (error) {
    console.error('Push notification registration failed:', error);
    return null;
  }
};
```

## üñ•Ô∏è BACKEND RULES (Node.js + Express + Railway)

### üóÑÔ∏è Database & Prisma Rules
```typescript
// ‚úÖ CORRECT - Always use transactions for related operations
const clockInUser = async (userId: string, locationData: LocationData) => {
  return await prisma.$transaction(async (tx) => {
    // Check if already clocked in
    const lastEvent = await tx.attendanceEvent.findFirst({
      where: { userId },
      orderBy: { timestamp: 'desc' }
    });
    
    if (lastEvent?.type === 'CLOCK_IN') {
      throw new Error('User already clocked in');
    }
    
    // Create clock in event
    const event = await tx.attendanceEvent.create({
      data: {
        userId,
        type: 'CLOCK_IN',
        timestamp: new Date(),
        location: locationData,
        qrVerified: true
      }
    });
    
    return event;
  });
};

// ‚úÖ CORRECT - Always validate input with Zod
const ClockInSchema = z.object({
  qrCode: z.string().min(1),
  location: z.object({
    latitude: z.number(),
    longitude: z.number(),
    accuracy: z.number().positive()
  })
});
```

### üîê Security Rules
```typescript
// ‚úÖ CORRECT - Always validate JWT and company context
const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: 'No token provided' });
    }
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      include: { company: true }
    });
    
    if (!user || !user.isActive) {
      return res.status(401).json({ error: 'Invalid user' });
    }
    
    req.user = user;
    req.company = user.company;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};
```

## üé® UI/UX RULES

### üì± React Native Styling
```typescript
// ‚úÖ CORRECT - Use NativeWind classes consistently
const AttendanceButton: React.FC<ButtonProps> = ({ onPress, children, variant = 'primary' }) => {
  const baseClasses = "px-6 py-4 rounded-lg font-semibold text-center";
  const variantClasses = {
    primary: "bg-blue-500 text-white",
    secondary: "bg-gray-200 text-gray-800",
    danger: "bg-red-500 text-white"
  };
  
  return (
    <TouchableOpacity 
      className={`${baseClasses} ${variantClasses[variant]}`}
      onPress={onPress}
    >
      <Text className="text-lg font-semibold">{children}</Text>
    </TouchableOpacity>
  );
};
```

### üåç Multi-tenant UI Rules
```typescript
// ‚úÖ CORRECT - Always show company context
const Header: React.FC = () => {
  const { user, company } = useAuth();
  
  return (
    <View className="bg-blue-500 p-4 flex-row justify-between items-center">
      <Text className="text-white text-lg font-bold">{company.name}</Text>
      <Text className="text-white">{user.firstName} {user.lastName}</Text>
    </View>
  );
};
```

## üß™ TESTING RULES

### üì± Mobile Testing
```typescript
// ‚úÖ CORRECT - Always test location-dependent features
describe('AttendanceService', () => {
  it('should reject clock in outside geofence', async () => {
    const outsideLocation = {
      latitude: 48.0000, // Far from company location
      longitude: 17.0000,
      accuracy: 10
    };
    
    await expect(
      attendanceService.clockIn('user-id', 'qr-code', outsideLocation)
    ).rejects.toThrow('Outside work area');
  });
});
```

## üöÄ DEPLOYMENT RULES

### üöÇ Railway Backend
```typescript
// ‚úÖ CORRECT - Always handle environment variables properly
const config = {
  port: parseInt(process.env.PORT || '3000'),
  databaseUrl: process.env.DATABASE_URL!,
  jwtSecret: process.env.JWT_SECRET!,
  corsOrigin: process.env.CORS_ORIGIN || 'http://localhost:8081'
};

// Validate required env vars
const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET'];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`Missing required environment variable: ${envVar}`);
  }
}
```

### üì± Expo Build
```typescript
// ‚úÖ CORRECT - Always configure app.config.js properly
export default {
  expo: {
    name: "Doch√°dzka Pro",
    slug: "attendance-pro",
    version: "1.0.0",
    ios: {
      bundleIdentifier: "com.yourcompany.attendancepro",
      infoPlist: {
        NSLocationWhenInUseUsageDescription: "T√°to aplik√°cia potrebuje pr√≠stup k polohe pre overenie va≈°ej poz√≠cie pri pipnut√≠ do pr√°ce.",
        NSLocationAlwaysAndWhenInUseUsageDescription: "T√°to aplik√°cia potrebuje pr√≠stup k polohe na pozad√≠ pre sledovanie pracovn√©ho ƒçasu a upozornenia pri opusten√≠ pracoviska."
      }
    },
    plugins: [
      "expo-location",
      "expo-task-manager", 
      "expo-notifications"
    ]
  }
};
```

## üîß DEVELOPMENT WORKFLOW

### üìã Pre-Commit Checklist
1. **Run ESLint fix**: `npx eslint . --ext .ts,.tsx --fix`
2. **Check TypeScript**: `npx tsc --noEmit`
3. **Run tests**: `npm test`
4. **Build check**: `npm run build`
5. **Only commit if ALL checks pass**

### üö® Error Handling Patterns
```typescript
// ‚úÖ CORRECT - Always use proper error boundaries
class AttendanceErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error: error.message };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Attendance error:', error, errorInfo);
    // Log to crash reporting service
  }

  render() {
    if (this.state.hasError) {
      return <ErrorScreen error={this.state.error} onRetry={this.handleRetry} />;
    }

    return this.props.children;
  }
}
```

## üì± APP STORE COMPLIANCE

### üîí Privacy Rules
```typescript
// ‚úÖ CORRECT - Always request permissions with clear explanations
const requestPermissions = async () => {
  // Step 1: Explain why we need location
  Alert.alert(
    "Povolenie polohy",
    "T√°to aplik√°cia potrebuje pr√≠stup k va≈°ej polohe pre:\n\n‚Ä¢ Overenie ≈æe ste na pracovisku\n‚Ä¢ Upozornenie pri opusten√≠ pr√°ce\n‚Ä¢ Presn√© sledovanie ƒçasu\n\nPoloha sa sleduje LEN poƒças pr√°ce.",
    [
      { text: "Zru≈°i≈•", style: "cancel" },
      { text: "Povoli≈•", onPress: requestLocationPermission }
    ]
  );
};
```

## üéØ CODE QUALITY STANDARDS

### ‚úÖ MANDATORY PRACTICES
- **Always use TypeScript strict mode**
- **Always handle async operations with try/catch**
- **Always validate user inputs**
- **Always provide loading states**
- **Always handle offline scenarios**
- **Always log errors for debugging**
- **Always use proper naming conventions**
- **Always write self-documenting code**

### üîÑ CONTINUOUS IMPROVEMENT
- **Refactor code when adding new features**
- **Update dependencies regularly**
- **Monitor performance metrics**
- **Collect user feedback**
- **Iterate based on real usage data**

---

## üö® REMEMBER: ZERO TOLERANCE FOR ERRORS!

**Every single warning or error MUST be fixed immediately. No exceptions!**

**Quality over speed. Perfect code over quick hacks.**

**When in doubt, ask for clarification rather than guessing.**
